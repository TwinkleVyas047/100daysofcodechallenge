/*Update the value of regularExpression field in the UsernameValidator class so that the regular expression only matches with valid usernames.

Input Format:
The first line of input contains an integer , describing the total number of usernames. Each of the next  lines contains a string describing the username. The locked stub code reads the inputs and validates the username.

Constraints:
1<=n<=100
The username consists of any printable characters.


Output Format
For each of the usernames, the locked stub code prints Valid if the username is valid; otherwise Invalid each on a new line.
*/

Code:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class UserName {
   public static void main(String[] args){
      Scanner in = new Scanner(System.in);
      int testCases = Integer.parseInt(in.nextLine());
      while(testCases>0){
         String username = in.nextLine();
         String pattern = "^[a-zA-Z]{1,1}[a-zA-Z0-9_]{7,29}$";
           Pattern r = Pattern.compile(pattern);
           Matcher m = r.matcher(username);
         if (m.find( )) {
            System.out.println("Valid");
         } else {
            System.out.println("Invalid");
         }
         testCases--;
      }
   }
}

Sample Input 0:

8
Julia
Samantha
Samantha_21
1Samantha
Samantha?10_2A
JuliaZ007
Julia@007
_Julia007

Sample Output 0:

Invalid
Valid
Valid
Invalid
Invalid
Valid
Invalid
Invalid
